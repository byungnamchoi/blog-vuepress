(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{336:function(t,n,e){},378:function(t,n,e){"use strict";var s=e(336);e.n(s).a},394:function(t,n,e){"use strict";e.r(n);var s={name:"LESS"},a=(e(378),e(25)),r=Object(a.a)(s,(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"less"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#less"}},[t._v("#")]),t._v(" LESS")]),t._v(" "),e("h2",{attrs:{id:"px-to-rem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#px-to-rem"}},[t._v("#")]),t._v(" px to rem")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// font-size: .rem(14)[] => font-size: 0.875rem\n.rem(@px) {\n  value: unit((@px/16), rem);\n}\n")])])]),e("p",{staticClass:"rem"},[t._v("px to rem")]),t._v(" "),e("h2",{attrs:{id:"px-to-em"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#px-to-em"}},[t._v("#")]),t._v(" px to em")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// font-size: .em(14, 16)[] => font-size: 0.875em\n.em(@px, @parent) {\n  value: unit((@px/@parent), em);\n}\n")])])]),e("p",{staticClass:"em"},[t._v("px to em")]),t._v(" "),e("h2",{attrs:{id:"less-플러그인-기능-사용-가능"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#less-플러그인-기능-사용-가능"}},[t._v("#")]),t._v(" less 플러그인 기능 사용 가능")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".button {\n  padding: unit((4/20), em) unit((10/20), em);\n  font-size: unit((20/16), rem);\n}\n\n.button {\n  padding: .em(4, 20)[] .em(10, 20)[];\n  font-size: .rem(20)[];\n}\n\n.button {\n  padding: em(4, 20) em(10, 20);\n  font-size: rem(20);\n}\n")])])]),e("h3",{attrs:{id:"less-플러그인은-js-함수-추가-필요"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#less-플러그인은-js-함수-추가-필요"}},[t._v("#")]),t._v(" less 플러그인은 JS 함수 추가 필요")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const gulp = require("gulp");\nconst less = require("gulp-less");\n\nfunction css() {\n  return gulp\n    .src("src/**/*.less")\n    .pipe(\n      less({\n        plugins: [\n          {\n            install(less, pluginManager, functions) {\n              /**\n               * 목표 px 값을 rem 값으로 변환하여 출력\n               * font-size: rem(20) => font-size: 1.25rem\n               */\n              functions.add("rem", ({ value }) => value / 16 + "rem");\n              /**\n               * 부모 px 값에 대해 목표 px 값이 되는 em 값을 반환\n               * font-size: em(20, 16) => font-size: 1.25em\n               */\n              functions.add(\n                "em",\n                (target, parent) => target.value / parent.value + "em"\n              );\n              /**\n               * 특정 뷰포트 너비일때의 px 값에 해당하는 vw 값을 반환\n               * width: vw(36, 360) => width: 10vw\n               */\n              functions.add(\n                "vw",\n                (targetPx, viewportWidth) =>\n                  (targetPx.value / viewportWidth.value) * 100 + "vw"\n              );\n              /**\n               * 특정 뷰포트 높이일때의 px 값에 해당하는 vh 값을 반환\n               * height: vh(36, 360) => height: 10vh\n               */\n              functions.add(\n                "vh",\n                (targetPx, viewportHeight) =>\n                  (targetPx.value / viewportHeight.value) * 100 + "vh"\n              );\n            },\n          },\n        ],\n      })\n    )\n    .pipe(gulp.dest("dist/"));\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * 지정한 경로, 파일명, 파일형식에 해당하는 웹 폰트 참조문 반환\n * src: local("Poppins"), fonts("../assets/fonts/", "Poppins", "woff2,woff")\n * =>\n * src: local("Poppins"),\n *      url("../assets/fonts/Poppins.woff2") format("woff2"),\n *      url("../assets/fonts/Poppins.woff") format("woff");\n */\nfunctions.add("fonts", (path, fileName, formats) => {\n  const pathPrefix = path.value || "";\n  const fileFormats = formats.value.split(",").map((format) => format.trim());\n  const fileRefs = fileFormats.map(\n    (format) =>\n      `url("${pathPrefix}${fileName.value}.${format}") format("${format}")`\n  );\n  return fileRefs.join(",");\n});\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);